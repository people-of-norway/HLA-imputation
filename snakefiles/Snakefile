from pathlib import Path
import sys

configfile: "parameters/config.yaml"
shell.executable("/bin/bash")

output_folder = Path(config['output_folder'])
CookHLA_path = Path(config['CookHLA_path'])
CookHLA_py = str(CookHLA_path /"CookHLA.py")
CookHLA_ref = str(CookHLA_path / "example" / "HM_CEU_REF")
sys.path.append(config['CookHLA_path'])
import MakeGeneticMap

def plink_base(path):
    """ part of the file without the last extension (such as .fam .bed .bim)

    plink often works on a trunk and creates extra files: a becomes a.fam, a.bed, a.bid
    This function creates this trunk, so /foo/bar/gazonk.fam becomes /foo/bar/gazonk
    The resulting trunk is typically used as input to plink
    Only the last '.' is removed so /foo.foo/bar/gazonk.x.fam will become /foo.foo/bar/gazonk.x
    """
    return re.sub(r"\.\w*$", "", path)

rule all:
    input:
        hla_a = str(output_folder / "HIBAG" / "hibag.A"),
        hla_b = str(output_folder /"HIBAG" / "hibag.B"),
        hla_c = str(output_folder / "HIBAG" / "hibag.C"),
        hla_drb1 = str(output_folder / "HIBAG" / "hibag.DRB1"),
        hla_dqb1 = str(output_folder / "HIBAG" / "hibag.DQB1"),
        hla_dpb1 = str(output_folder / "HIBAG" / "hibag.DPB1")

rule extract_hla:
    input:
        bedset = multiext(config['input_trunk'], ".bed", ".bim", ".fam")
    output:
        bedset = multiext(str(output_folder/"extract_hla"), ".bed", ".bim", ".fam")
    params:
        from_bp = str(config['from_bp']),
        to_bp = str(config['to_bp'])
    run:
        in_trunk = plink_base(input.bedset[0])
        out_trunk = plink_base(output.bedset[0])
        subprocess.run([
            "plink2",
            "--bfile", in_trunk,
            "--chr", "6",
            "--from-bp", params.from_bp,
            "--to-bp", params.to_bp,
            "--out", out_trunk,
            "--make-bed"
        ])


rule run_hibag:
    input:
        bedset = rules.extract_hla.output.bedset
    output:
        hla_a = str(output_folder / "HIBAG" / "hibag.A"),
        hla_b = str(output_folder /"HIBAG" / "hibag.B"),
        hla_c = str(output_folder / "HIBAG" / "hibag.C"),
        hla_drb1 = str(output_folder / "HIBAG" / "hibag.DRB1"),
        hla_dqb1 = str(output_folder / "HIBAG" / "hibag.DQB1"),
        hla_dpb1 = str(output_folder / "HIBAG" / "hibag.DPB1")
    threads: 32
    params:
        hibag_model = config['hibag_model'],
        hibag_r = "HIBAG/HIBAG.R"
    run:
        in_trunk = plink_base(input.bedset[0])
        out_trunk = plink_base(output.hla_a)
        subprocess.run(["Rscript", params.hibag_r, in_trunk, out_trunk, params.hibag_model, str(threads)])

rule generate_map:
    input:
        bedset = rules.extract_hla.output.bedset
    output:
        erate = str(output_folder / "CookHLA" / "generate_map.aver.erate")
        clpsB =  str(output_folder / "CookHLA" / "generate_map.mach_step.avg.clpsB")
    conda:
        str(CookHLA_path / "CookHLA_LINUX.yml")
    shell:
        """
        in_full="{input.bedset[0]}"
        in_trunk="${in_full%.*}"
        output_full={output.erate}
        out_trunk="${{output_full%.aver.erate}}"
        python -m MakeGeneticMap -i $in_trunk -hg 19 -ref {CookHLA_ref} -o $out_trunk
        """

rule run_cookhla:
    input:
        bedset = rules.extract_hla.output.bedset,
        erate = rules.generate_map.output.erate,
        clpsB = rules.generate_map.output.clpsB
    output:
        alleles = str(output_folder / "cookhla_output.alleles")
    conda:
        str(CookHLA_path / "CookHLA_LINUX.yml")
    params:
        mem = config['CookHLA_mem']
    threads: 32
    shell:
        """
        in_full="{input.bedset[0]}"
        in_trunk="${in_full%.*}"
        out_full="{output.alleles}"
        out_trunk="${out_full%.*}"
        python {CookHLA_py} -i $in_trunk -hg 19 -o $out_trunk -ref {CookHLA_ref} -gm {input.clpsB} -ae {input.erate} -mem {params.mem} -nth {threads}
        """
    


