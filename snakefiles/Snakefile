from pathlib import Path
import sys

configfile: "parameters/config.yaml"
shell.executable("/bin/bash")

output_folder = Path(config['output_folder'] + config["release"])
docs_folder = output_folder / "docs"
CookHLA_path = Path(config['CookHLA_path'])
CookHLA_py = str(CookHLA_path /"CookHLA.py")
CookHLA_ref = str(CookHLA_path / "example" / "HM_CEU_REF")
sys.path.append(config['CookHLA_path'])
allele_frequencies_folder =Path(config['allele_frequencies_folder'])
github_docs = Path(os.path.dirname(workflow.basedir)) / 'docs' / config['release']

import MakeGeneticMap

def plink_base(path):
    """
    Remove file extension from file name/path
    """
    return re.sub(r"\.\w*$", "", path)

rule all:
    input:
        report = str(github_docs / "report.md"),
        merged_alleles = str(output_folder / "merged_alleles")


rule extract_hla:
    input:
        bedset = multiext(config['input_trunk'], ".pgen", ".pvar", ".psam")
    output:
        bedset = multiext(str(output_folder/"extract_hla"), ".bed", ".bim", ".fam")
    params:
        from_bp = str(config['from_bp']),
        to_bp = str(config['to_bp'])
    run:
        in_trunk = plink_base(input.bedset[0])
        out_trunk = plink_base(output.bedset[0])
        subprocess.run([
            "plink2",
            "--pfile", in_trunk,
            "--chr", "6",
            "--from-bp", params.from_bp,
            "--to-bp", params.to_bp,
            "--out", out_trunk,
            "--make-bed"
        ])


rule run_hibag:
    input:
        bedset = rules.extract_hla.output.bedset
    output:
        hla_a = str(output_folder / "HIBAG" / "hibag.A"),
        hla_b = str(output_folder /"HIBAG" / "hibag.B"),
        hla_c = str(output_folder / "HIBAG" / "hibag.C"),
        hla_drb1 = str(output_folder / "HIBAG" / "hibag.DRB1"),
        hla_dqa1 = str(output_folder / "HIBAG" / "hibag.DQA1"),
        hla_dqb1 = str(output_folder / "HIBAG" / "hibag.DQB1"),
        hla_dpb1 = str(output_folder / "HIBAG" / "hibag.DPB1")
    threads: 32
    params:
        hibag_model = "HIBAG/InfiniumOmniExpress-24-European-HLA4-hg19.RData",
        hibag_r = "HIBAG/HIBAG.R"
    run:
        in_trunk = plink_base(input.bedset[0])
        out_trunk = plink_base(output.hla_a)
        subprocess.run(["Rscript", params.hibag_r, in_trunk, out_trunk, params.hibag_model, str(threads)])


rule run_cookhla:
    input:
        bedset = rules.extract_hla.output.bedset
    output:
        alleles = str(output_folder / "CookHLA" / "cookhla_output.MHC.HLA_IMPUTATION_OUT.alleles")
    conda:
        str(CookHLA_path / "CookHLA_LINUX.yml")
    params:
        mem = config['CookHLA_mem']
    threads: 32
    shell:
        """
        in_full="{input.bedset[0]}"
        in_trunk="${{in_full%.*}}"
        out_full="{output.alleles}"
        out_trunk="${{out_full%.MHC.HLA_IMPUTATION_OUT.alleles}}"
        cd {CookHLA_path}
        python {CookHLA_py} -i $in_trunk -hg 19 -o $out_trunk -ref {CookHLA_ref} -mem {params.mem} -nth {threads}
        """

rule merge_and_make_docs_report:
    input:
        bedset = rules.extract_hla.output.bedset,
        hibag_hla_a = rules.run_hibag.output.hla_a,
        hibag_hla_b = rules.run_hibag.output.hla_b,
        hibag_hla_c = rules.run_hibag.output.hla_c,
        hibag_hla_drb1 = rules.run_hibag.output.hla_drb1,
        hibag_hla_dqa1 = rules.run_hibag.output.hla_dqb1,
        hibag_hla_dqb1 = rules.run_hibag.output.hla_dqb1,
        hibag_hla_dpb1 = rules.run_hibag.output.hla_dpb1,
        cookhla = rules.run_cookhla.output.alleles
    output:
        md = str(github_docs / "report.md"),
        merged_alleles = str(output_folder / "merged_alleles")
    params:
        merge_report_script = "utils/merge_and_make_report.R",
        allele_frequencies_trunk = str(allele_frequencies_folder / "HLA")
    run:
        in_trunk_hibag = plink_base(input.hibag_hla_a)
        subprocess.run(["Rscript", params.merge_report_script, in_trunk_hibag, input.cookhla, input.bedset[2], params.allele_frequencies_trunk, output.md, output.merged_alleles, "HLA imputation report " + config["release"]])


    

    


